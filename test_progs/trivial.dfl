(defgadt Vec 2u ((: a 1u) (: n Nat))
  ((: leaf (Vec a zero))
   (: cons (-> a (Vec a n) (Vec a (succ n))))))

(defgadt Nat 1u ()
  ((: zero Nat)
   (: succ (-> Nat Nat))))

(def add_one (Π (: _ int) int) (λ (: x int) (__add_int x 1i)))


(def add_numbers (Π (: _ int) (Π (: _ int) int)) (λ (: x int) (λ (: y int) (__add_int x y))))
