(defgadt Vec 2u ((: a 1u) (: n Nat))
  ((: leaf (Vec a zero))
   (: cons (-> a (Vec a n) (Vec a (succ n))))))

(defgadt Nat 1u ()
  ((: zero Nat)
   (: succ (-> Nat Nat))))

(def add_one (Î  (: _ int) int) (Î» x (__add_int x 1i)))
